// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudyProductivityApp.Persistence.Data;

#nullable disable

namespace StudyProductivityApp.Persistence.Migrations
{
    [DbContext(typeof(StudyProductivityDbContext))]
    [Migration("20241021205346_UpdatedMessages")]
    partial class UpdatedMessages
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StudyProductivityApp.Core.Models.Attendee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Attendees");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.Call", b =>
                {
                    b.Property<int>("CallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CallId"));

                    b.Property<DateTime?>("CallEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CallStartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CallerUserId")
                        .HasColumnType("int");

                    b.Property<string>("CallerUserUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ChatRoomId")
                        .HasColumnType("int");

                    b.Property<bool>("IsVideoCall")
                        .HasColumnType("bit");

                    b.HasKey("CallId");

                    b.HasIndex("CallerUserUserId");

                    b.HasIndex("ChatRoomId");

                    b.ToTable("Calls");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.ChatParticipant", b =>
                {
                    b.Property<string>("ChatParticipantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ChatRoomId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatParticipantId");

                    b.HasIndex("ChatRoomId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatParticipant");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.ChatRoom", b =>
                {
                    b.Property<int>("ChatRoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatRoomId"));

                    b.Property<bool>("IsGroupChat")
                        .HasColumnType("bit");

                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChatRoomId");

                    b.ToTable("ChatRooms");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.Complaint", b =>
                {
                    b.Property<int>("ComplaintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComplaintId"));

                    b.Property<DateTime>("DateReported")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ComplaintId");

                    b.HasIndex("UserId");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.Document", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.DocumentShare", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("CanRead")
                        .HasColumnType("bit");

                    b.Property<bool>("CanWrite")
                        .HasColumnType("bit");

                    b.Property<string>("DocumentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SharedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentShares");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.Friend", b =>
                {
                    b.Property<string>("FriendId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FriendUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FriendId");

                    b.HasIndex("FriendUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.GroupChat", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GroupChats");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.GroupChatMember", b =>
                {
                    b.Property<string>("GroupChatId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupChatId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupChatMembers");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.HttpRequestLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("HttpRequestLogs");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.MeetupEvent", b =>
                {
                    b.Property<string>("MeetupEventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<DateTime>("MeetupDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MeetupEventId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("MeetupEvents");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<int?>("ChatRoomId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupChatId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MessageId");

                    b.HasIndex("ChatRoomId");

                    b.HasIndex("GroupChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.TodoTask", b =>
                {
                    b.Property<int>("TodoTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TodoTaskId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TodoTaskId");

                    b.HasIndex("UserId");

                    b.ToTable("TodoTasks");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsInvited")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.UserActivity", b =>
                {
                    b.Property<int>("UserActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserActivityId"));

                    b.Property<string>("ActivityType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("UserActivities");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.UserFile", b =>
                {
                    b.Property<int>("UserFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserFileId"));

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserFileId");

                    b.HasIndex("UploadedByUserId");

                    b.ToTable("UserFiles");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.UserFileAccess", b =>
                {
                    b.Property<int>("UserFileAccessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserFileAccessId"));

                    b.Property<string>("AccessLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SharedWithUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserFileId")
                        .HasColumnType("int");

                    b.HasKey("UserFileAccessId");

                    b.HasIndex("SharedWithUserId");

                    b.HasIndex("UserFileId");

                    b.ToTable("UserFileAccesses");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.UserProfile", b =>
                {
                    b.Property<int>("UserProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserProfileId"));

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserProfileId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.Attendee", b =>
                {
                    b.HasOne("StudyProductivityApp.Core.Models.MeetupEvent", "Event")
                        .WithMany("Attendees")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyProductivityApp.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.Call", b =>
                {
                    b.HasOne("StudyProductivityApp.Core.Models.User", "CallerUser")
                        .WithMany()
                        .HasForeignKey("CallerUserUserId");

                    b.HasOne("StudyProductivityApp.Core.Models.ChatRoom", "ChatRoom")
                        .WithMany("Calls")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CallerUser");

                    b.Navigation("ChatRoom");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.ChatParticipant", b =>
                {
                    b.HasOne("StudyProductivityApp.Core.Models.ChatRoom", "ChatRoom")
                        .WithMany("ChatParticipants")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyProductivityApp.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.Complaint", b =>
                {
                    b.HasOne("StudyProductivityApp.Core.Models.User", "User")
                        .WithMany("Complaints")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.Document", b =>
                {
                    b.HasOne("StudyProductivityApp.Core.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.DocumentShare", b =>
                {
                    b.HasOne("StudyProductivityApp.Core.Models.Document", "Document")
                        .WithMany("Shares")
                        .HasForeignKey("DocumentId");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.Friend", b =>
                {
                    b.HasOne("StudyProductivityApp.Core.Models.User", "FriendUser")
                        .WithMany("FriendOf")
                        .HasForeignKey("FriendUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StudyProductivityApp.Core.Models.User", "User")
                        .WithMany("Friends")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FriendUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.GroupChatMember", b =>
                {
                    b.HasOne("StudyProductivityApp.Core.Models.GroupChat", "GroupChat")
                        .WithMany("Members")
                        .HasForeignKey("GroupChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyProductivityApp.Core.Models.User", "User")
                        .WithMany("GroupChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupChat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.HttpRequestLog", b =>
                {
                    b.HasOne("StudyProductivityApp.Core.Models.User", null)
                        .WithMany("HttpRequestLogs")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.MeetupEvent", b =>
                {
                    b.HasOne("StudyProductivityApp.Core.Models.User", "CreatedByUser")
                        .WithMany("CreatedEvents")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyProductivityApp.Core.Models.User", null)
                        .WithMany("JoinedEvents")
                        .HasForeignKey("UserId");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.Message", b =>
                {
                    b.HasOne("StudyProductivityApp.Core.Models.ChatRoom", "ChatRoom")
                        .WithMany("Messages")
                        .HasForeignKey("ChatRoomId");

                    b.HasOne("StudyProductivityApp.Core.Models.GroupChat", "GroupChat")
                        .WithMany()
                        .HasForeignKey("GroupChatId");

                    b.HasOne("StudyProductivityApp.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ChatRoom");

                    b.Navigation("GroupChat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.TodoTask", b =>
                {
                    b.HasOne("StudyProductivityApp.Core.Models.User", "User")
                        .WithMany("TodoTasks")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.UserActivity", b =>
                {
                    b.HasOne("StudyProductivityApp.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.UserFile", b =>
                {
                    b.HasOne("StudyProductivityApp.Core.Models.User", "UploadedByUser")
                        .WithMany("UploadedFiles")
                        .HasForeignKey("UploadedByUserId");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.UserFileAccess", b =>
                {
                    b.HasOne("StudyProductivityApp.Core.Models.User", "SharedWithUser")
                        .WithMany("UserFileAccesses")
                        .HasForeignKey("SharedWithUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StudyProductivityApp.Core.Models.UserFile", "UserFile")
                        .WithMany("UserFileAccesses")
                        .HasForeignKey("UserFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SharedWithUser");

                    b.Navigation("UserFile");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.UserProfile", b =>
                {
                    b.HasOne("StudyProductivityApp.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.ChatRoom", b =>
                {
                    b.Navigation("Calls");

                    b.Navigation("ChatParticipants");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.Document", b =>
                {
                    b.Navigation("Shares");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.GroupChat", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.MeetupEvent", b =>
                {
                    b.Navigation("Attendees");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.User", b =>
                {
                    b.Navigation("Complaints");

                    b.Navigation("CreatedEvents");

                    b.Navigation("FriendOf");

                    b.Navigation("Friends");

                    b.Navigation("GroupChats");

                    b.Navigation("HttpRequestLogs");

                    b.Navigation("JoinedEvents");

                    b.Navigation("TodoTasks");

                    b.Navigation("UploadedFiles");

                    b.Navigation("UserFileAccesses");
                });

            modelBuilder.Entity("StudyProductivityApp.Core.Models.UserFile", b =>
                {
                    b.Navigation("UserFileAccesses");
                });
#pragma warning restore 612, 618
        }
    }
}
